import logging
from datetime import datetime, timedelta
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler, MessageHandler, filters
from database import db
from config import ADMIN_IDS


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    return user_id in ADMIN_IDS


async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().strftime("%d.%m.%Y")
    today_appointments = db.get_appointments_by_date(today)
    today_count = len(today_appointments)

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_appointments = len(db.get_all_appointments(days=30))

    keyboard = [
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="admin_today")],
        [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ (7 –¥–Ω–µ–π)", callback_data="admin_all")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å", callback_data="admin_search")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = f"""
üë®‚Äçüíº **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {today_count}
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π (30 –¥–Ω–µ–π): {total_appointments}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    await update.message.reply_text(text, reply_markup=reply_markup,)


async def admin_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    today = datetime.now().strftime("%d.%m.%Y")
    appointments = db.get_appointments_by_date(today)

    if not appointments:
        text = "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç."
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    else:
        text = f"üìÖ **–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today})**\n\n"

        for i, appt in enumerate(appointments, 1):
            status_icon = "‚úÖ" if appt['status'] == 'confirmed' else "‚è≥"
            text += f"{i}. {status_icon} {appt['appointment_time']} - {appt['service_name']}\n"
            text += f"   üöó {appt['car_brand']} {appt['car_model']}\n"
            text += f"   üë§ {appt['first_name']} ({appt['phone']})\n"
            text += f"   üìù ID: #{appt['id']}\n\n"

        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_today")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup,)


async def admin_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ 7 –¥–Ω–µ–π"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    appointments = db.get_all_appointments(days=7)

    if not appointments:
        text = "üìã –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç."
    else:
        text = "üìã **–í—Å–µ –∑–∞–ø–∏—Å–∏ (7 –¥–Ω–µ–π)**\n\n"

        current_date = None
        for appt in appointments:
            if appt['appointment_date'] != current_date:
                current_date = appt['appointment_date']
                weekday = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][
                    datetime.strptime(current_date, "%d.%m.%Y").weekday()
                ]
                text += f"\nüìÖ **{current_date} ({weekday})**\n"

            status_icon = "‚úÖ" if appt['status'] == 'confirmed' else "‚è≥"
            status_icon = "‚ùå" if appt['status'] == 'cancelled' else status_icon

            text += f"{status_icon} {appt['appointment_time']} - {appt['service_name']}\n"
            text += f"   üöó {appt['car_brand']} {appt['car_model']} | üë§ {appt['first_name']}\n"
            text += f"   üìù ID: #{appt['id']}\n"

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
            if appt['status'] == 'pending':
                text += f"   [–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å](tg://btn?admin_confirm_{appt['id']}) | [–û—Ç–º–µ–Ω–∏—Ç—å](tg://btn?admin_cancel_{appt['id']})\n"
            elif appt['status'] == 'confirmed':
                text += f"   [–û—Ç–º–µ–Ω–∏—Ç—å](tg://btn?admin_cancel_{appt['id']})\n"

            text += "\n"

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_all")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup,)


async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å–ª—É–≥–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
    appointments = db.get_all_appointments(days=30)

    service_stats = {}
    status_stats = {'pending': 0, 'confirmed': 0, 'cancelled': 0}

    for appt in appointments:
        service_name = appt['service_name']
        service_stats[service_name] = service_stats.get(service_name, 0) + 1
        status_stats[appt['status']] = status_stats.get(appt['status'], 0) + 1

    text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (30 –¥–Ω–µ–π)**\n\n"

    text += "üìà **–ü–æ —É—Å–ª—É–≥–∞–º:**\n"
    for service, count in service_stats.items():
        text += f"‚Ä¢ {service}: {count}\n"

    text += "\nüéØ **–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:**\n"
    text += f"‚Ä¢ ‚è≥ –û–∂–∏–¥–∞—é—Ç: {status_stats['pending']}\n"
    text += f"‚Ä¢ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã: {status_stats['confirmed']}\n"
    text += f"‚Ä¢ ‚ùå –û—Ç–º–µ–Ω–µ–Ω—ã: {status_stats['cancelled']}\n"

    text += f"\nüìÖ **–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:** {len(appointments)}"

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup,)


async def admin_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –ø–æ ID"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    context.user_data['admin_search'] = True

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üîç **–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏**\n\n–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1):",
        reply_markup=reply_markup,
       
    )


async def admin_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    if 'admin_search' in context.user_data:
        del context.user_data['admin_search']

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    today = datetime.now().strftime("%d.%m.%Y")
    today_appointments = db.get_appointments_by_date(today)
    today_count = len(today_appointments)
    total_appointments = len(db.get_all_appointments(days=30))

    keyboard = [
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="admin_today")],
        [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ (7 –¥–Ω–µ–π)", callback_data="admin_all")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å", callback_data="admin_search")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = f"""
üë®‚Äçüíº **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {today_count}
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π (30 –¥–Ω–µ–π): {total_appointments}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    await query.edit_message_text(text, reply_markup=reply_markup)


async def handle_admin_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    user_id = update.message.from_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if not context.user_data.get('admin_search'):
        return

    try:
        appointment_id = int(update.message.text.strip())
        appointment = db.get_appointment(appointment_id)

        if not appointment:
            await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        status_text = {
            'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
            'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
        }

        text = f"""
üîç **–ó–∞–ø–∏—Å—å #{appointment['id']}**

üöó **–£—Å–ª—É–≥–∞:** {appointment['service_name']}
üìÖ **–î–∞—Ç–∞:** {appointment['appointment_date']}
üïí **–í—Ä–µ–º—è:** {appointment['appointment_time']}
üéØ **–°—Ç–∞—Ç—É—Å:** {status_text[appointment['status']]}

üë§ **–ö–ª–∏–µ–Ω—Ç:**
‚Ä¢ –ò–º—è: {appointment['first_name']}
‚Ä¢ Username: @{appointment['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {appointment['phone']}

üöô **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:**
‚Ä¢ –ú–∞—Ä–∫–∞: {appointment['car_brand']}
‚Ä¢ –ú–æ–¥–µ–ª—å: {appointment['car_model']}
‚Ä¢ –ì–æ–¥: {appointment['car_year']}

üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {appointment['comment'] or '–Ω–µ—Ç'}
"""
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = []
        if appointment['status'] == 'pending':
            keyboard.append([
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{appointment_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_cancel_{appointment_id}")
            ])
        elif appointment['status'] == 'confirmed':
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_cancel_{appointment_id}")])

        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        del context.user_data['admin_search']

    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ).")


async def handle_appointment_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø–∏—Å—è–º–∏ (–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å)"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    data = query.data
    appointment_id = int(data.split('_')[-1])

    if data.startswith('admin_confirm_'):
        success = db.update_appointment_status(appointment_id, 'confirmed')
        action_text = "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
    elif data.startswith('admin_cancel_'):
        success = db.update_appointment_status(appointment_id, 'cancelled')
        action_text = "–æ—Ç–º–µ–Ω–µ–Ω–∞"
    else:
        return

    if success:
        await query.answer(f"‚úÖ –ó–∞–ø–∏—Å—å {action_text}!")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        appointment = db.get_appointment(appointment_id)
        if appointment:
            status_text = {
                'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
                'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
                'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
            }

            text = f"""
üîç **–ó–∞–ø–∏—Å—å #{appointment['id']}**

üöó **–£—Å–ª—É–≥–∞:** {appointment['service_name']}
üìÖ **–î–∞—Ç–∞:** {appointment['appointment_date']}
üïí **–í—Ä–µ–º—è:** {appointment['appointment_time']}
üéØ **–°—Ç–∞—Ç—É—Å:** {status_text[appointment['status']]}

üë§ **–ö–ª–∏–µ–Ω—Ç:** {appointment['first_name']}
üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {appointment['phone']}
üöô **–ê–≤—Ç–æ:** {appointment['car_brand']} {appointment['car_model']}
"""
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(text, reply_markup=reply_markup,)
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞!")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_admin_handlers(application):
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CallbackQueryHandler(admin_today, pattern="^admin_today$"))
    application.add_handler(CallbackQueryHandler(admin_all, pattern="^admin_all$"))
    application.add_handler(CallbackQueryHandler(admin_stats, pattern="^admin_stats$"))
    application.add_handler(CallbackQueryHandler(admin_search, pattern="^admin_search$"))
    application.add_handler(CallbackQueryHandler(admin_back, pattern="^admin_back$"))
    application.add_handler(CallbackQueryHandler(handle_appointment_action, pattern="^admin_(confirm|cancel)_"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_search))