import logging
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ConversationHandler
from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import re
import sqlite3

from config import BOT_TOKEN
from database import db
from states import AppointmentState, user_data_store

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


# ==================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ====================

def main_menu_keyboard():
    keyboard = [
        [KeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É")],
        [KeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏"), KeyboardButton("‚ÑπÔ∏è –û–± —É—Å–ª—É–≥–∞—Ö")],
        [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üöó\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å '–ê–≤—Ç–æ–ú–∞—Å—Ç–µ—Ä'!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu_keyboard()
    )


async def handle_message(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = update.message.text

    if text == "‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É":
        # –ó–∞–ø–∏—Å—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ ConversationHandler
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É' –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏.")
    elif text == "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏":
        await show_my_appointments(update, context)
    elif text == "‚ÑπÔ∏è –û–± —É—Å–ª—É–≥–∞—Ö":
        await show_services_info(update, context)
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await show_contacts(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ üëá", reply_markup=main_menu_keyboard())


async def show_my_appointments(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    appointments = db.get_user_appointments(user_id)

    if not appointments:
        await update.message.reply_text("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return

    text = "üìã **–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:**\n\n"

    for appt in appointments[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
        status_icon = "‚úÖ" if appt['status'] == 'confirmed' else "‚è≥"
        status_icon = "‚ùå" if appt['status'] == 'cancelled' else status_icon

        status_text = {
            'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞'
        }

        text += f"{status_icon} **–ó–∞–ø–∏—Å—å #{appt['id']}**\n"
        text += f"üöó –£—Å–ª—É–≥–∞: {appt['service_name']}\n"
        text += f"üìÖ –î–∞—Ç–∞: {appt['appointment_date']}\n"
        text += f"üïí –í—Ä–µ–º—è: {appt['appointment_time']}\n"
        text += f"üéØ –°—Ç–∞—Ç—É—Å: {status_text[appt['status']]}\n"

        if appt['comment']:
            text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {appt['comment']}\n"

        text += "\n" + "‚îÄ" * 30 + "\n\n"

    if len(appointments) > 5:
        text += f"üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ 5 –∏–∑ {len(appointments)} –∑–∞–ø–∏—Å–µ–π"

    await update.message.reply_text(text, parse_mode='Markdown')


async def show_services_info(update, context):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–∞—Ö"""
    services_text = """
üõ¢ **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ**:
- –ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–¥–∫–æ—Å—Ç–µ–π
- –û–±—â–∏–π –æ—Å–º–æ—Ç—Ä

üîß **–†–µ–º–æ–Ω—Ç –¥–≤–∏–≥–∞—Ç–µ–ª—è**:
- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç
- –ó–∞–º–µ–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö
- –ß–∏–ø-—Ç—é–Ω–∏–Ω–≥

üõû **–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂**:
- –°–µ–∑–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ —à–∏–Ω
- –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞
- –†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–æ–≤

üé® **–ö—É–∑–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã**:
- –ü–æ–∫—Ä–∞—Å–∫–∞
- –†–µ–º–æ–Ω—Ç –≤–º—è—Ç–∏–Ω
- –ü–æ–ª–∏—Ä–æ–≤–∫–∞

‚ö° **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞**:
- –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
- –¢–µ—Å—Ç-–¥—Ä–∞–π–≤
"""
    await update.message.reply_text(services_text, parse_mode='Markdown')


async def show_contacts(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
    contacts_text = """
üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞**:

üìç –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è, –¥. 15
üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67
üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 9:00-20:00, –°–±-–í—Å 10:00-18:00

üöó –ö–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏:
- 5 –º–∏–Ω—É—Ç –æ—Ç –º–µ—Ç—Ä–æ "–ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∞—è"
- –ï—Å—Ç—å –ø–∞—Ä–∫–æ–≤–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
"""
    await update.message.reply_text(contacts_text, parse_mode='Markdown')


# ==================== –°–ò–°–¢–ï–ú–ê –ó–ê–ü–ò–°–ò ====================

async def start_appointment(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏"""
    user = update.message.from_user
    user_id = user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data_store[user_id] = {
        'step': AppointmentState.SELECT_SERVICE,
        'user_info': {
            'user_id': user_id,
            'username': user.username,
            'first_name': user.first_name
        }
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db.add_user(user_id, user.username, user.first_name)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏
    services = db.get_services()
    keyboard = []
    for service in services:
        keyboard.append([
            InlineKeyboardButton(
                f"{service['name']} ({service['price_range']})",
                callback_data=f"select_service_{service['id']}"
            )
        ])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üöó –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=reply_markup
    )

    return AppointmentState.SELECT_SERVICE


async def select_service(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    service_id = int(query.data.replace("select_service_", ""))

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
    services = db.get_services()
    selected_service = next((s for s in services if s['id'] == service_id), None)

    if selected_service:
        user_data_store[user_id]['service'] = selected_service
        user_data_store[user_id]['step'] = AppointmentState.SELECT_DATE

        await query.edit_message_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: {selected_service['name']}\n"
            f"üìù {selected_service['description']}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:"
        )
        await show_date_selection(query.message, user_id)

    return AppointmentState.SELECT_DATE


async def show_date_selection(message, user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
    dates = []
    keyboard = []

    for i in range(1, 8):
        date = datetime.now() + timedelta(days=i)
        if date.weekday() < 5:  # –¢–æ–ª—å–∫–æ –±—É–¥–Ω–∏ (0-4 = –ü–Ω-–ü—Ç)
            date_str = date.strftime("%d.%m.%Y")
            weekday = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][date.weekday()]
            dates.append((date_str, f"{date_str} ({weekday})"))

    for i in range(0, len(dates), 2):
        row = []
        for j in range(2):
            if i + j < len(dates):
                date_str, display_text = dates[i + j]
                row.append(InlineKeyboardButton(display_text, callback_data=f"select_date_{date_str}"))
        keyboard.append(row)

    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=reply_markup)


async def select_date(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    date_str = query.data.replace("select_date_", "")

    user_data_store[user_id]['appointment_date'] = date_str
    user_data_store[user_id]['step'] = AppointmentState.SELECT_TIME

    await query.edit_message_text(f"üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date_str}")
    await show_time_selection(query.message, user_id, date_str)

    return AppointmentState.SELECT_TIME


async def show_time_selection(message, user_id, date_str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    available_slots = db.get_available_time_slots(date_str)

    if not available_slots:
        await message.reply_text(
            "‚ùå –ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É."
        )
        await show_date_selection(message, user_id)
        return AppointmentState.SELECT_DATE

    keyboard = []
    for i in range(0, len(available_slots), 3):
        row = []
        for j in range(3):
            if i + j < len(available_slots):
                time_slot = available_slots[i + j]
                row.append(InlineKeyboardButton(time_slot, callback_data=f"select_time_{time_slot}"))
        keyboard.append(row)

    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.reply_text("üïí –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=reply_markup)


async def select_time(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    time_slot = query.data.replace("select_time_", "")

    user_data_store[user_id]['appointment_time'] = time_slot
    user_data_store[user_id]['step'] = AppointmentState.CAR_BRAND

    await query.edit_message_text(f"üïí –í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è: {time_slot}")
    await query.message.reply_text("üöó –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n(–ù–∞–ø—Ä–∏–º–µ—Ä: Toyota, BMW, Lada)")

    return AppointmentState.CAR_BRAND


async def get_car_brand(update, context):
    """–ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    user_id = update.message.from_user.id
    car_brand = update.message.text

    user_data_store[user_id]['car_brand'] = car_brand
    user_data_store[user_id]['step'] = AppointmentState.CAR_MODEL

    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n(–ù–∞–ø—Ä–∏–º–µ—Ä: Camry, X5, Vesta)")

    return AppointmentState.CAR_MODEL


async def get_car_model(update, context):
    """–ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    user_id = update.message.from_user.id
    car_model = update.message.text

    user_data_store[user_id]['car_model'] = car_model
    user_data_store[user_id]['step'] = AppointmentState.CAR_YEAR

    await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n(–ù–∞–ø—Ä–∏–º–µ—Ä: 2018)")

    return AppointmentState.CAR_YEAR


async def get_car_year(update, context):
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    user_id = update.message.from_user.id
    car_year = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–¥ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if not car_year.isdigit() or len(car_year) != 4 or int(car_year) < 1990 or int(car_year) > datetime.now().year + 1:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (4 —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2018)")
        return AppointmentState.CAR_YEAR

    user_data_store[user_id]['car_year'] = int(car_year)
    user_data_store[user_id]['step'] = AppointmentState.PHONE

    await update.message.reply_text(
        "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:\n"
        "(–ù–∞–ø—Ä–∏–º–µ—Ä: +79161234567 –∏–ª–∏ 9161234567)"
    )

    return AppointmentState.PHONE


async def get_phone(update, context):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = update.message.from_user.id
    phone = update.message.text

    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_clean = re.sub(r'[^\d+]', '', phone)
    if len(phone_clean) < 10:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return AppointmentState.PHONE

    user_data_store[user_id]['phone'] = phone_clean
    user_data_store[user_id]['step'] = AppointmentState.COMMENT

    await update.message.reply_text(
        "üí¨ –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö:\n"
        "(–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)"
    )

    return AppointmentState.COMMENT


async def get_comment(update, context):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    user_id = update.message.from_user.id
    comment = update.message.text

    if comment == '-':
        comment = ""

    user_data_store[user_id]['comment'] = comment
    user_data_store[user_id]['step'] = AppointmentState.CONFIRM

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = user_data_store[user_id]
    summary = f"""
üìã **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:**

üöó –£—Å–ª—É–≥–∞: {data['service']['name']}
üìÖ –î–∞—Ç–∞: {data['appointment_date']}
üïí –í—Ä–µ–º—è: {data['appointment_time']}
üéØ –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {data['car_brand']} {data['car_model']} ({data['car_year']} –≥.)
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}
"""
    if comment:
        summary += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="confirm_appointment")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_appointment")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(summary, reply_markup=reply_markup, parse_mode='Markdown')

    return AppointmentState.CONFIRM


async def confirm_appointment(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = user_data_store.get(user_id)

    if not data:
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    appointment_id = db.create_appointment(
        user_id=user_id,
        service_id=data['service']['id'],
        service_name=data['service']['name'],
        appointment_date=data['appointment_date'],
        appointment_time=data['appointment_time'],
        car_brand=data['car_brand'],
        car_model=data['car_model'],
        car_year=data['car_year'],
        phone=data['phone'],
        comment=data.get('comment', '')
    )

    if appointment_id:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.update_user_car_info(
            user_id, data['car_brand'], data['car_model'], data['car_year'], data['phone']
        )

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in user_data_store:
            del user_data_store[user_id]

        success_text = f"""
‚úÖ **–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!**

–ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: #{appointment_id}
üöó –£—Å–ª—É–≥–∞: {data['service']['name']}
üìÖ –î–∞—Ç–∞: {data['appointment_date']}
üïí –í—Ä–µ–º—è: {data['appointment_time']}

–ú—ã –∂–¥–µ–º –≤–∞—Å –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–µ!
üìû –î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–≤–æ–Ω–∏—Ç–µ: +7 (495) 123-45-67
        """

        await query.edit_message_text(success_text, parse_mode='Markdown')
    else:
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    return ConversationHandler.END


async def cancel_appointment(update, context):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if user_id in user_data_store:
        del user_data_store[user_id]

    await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


async def cancel_conversation(update, context):
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ –∫–æ–º–∞–Ω–¥–µ /cancel"""
    user_id = update.message.from_user.id
    if user_id in user_data_store:
        del user_data_store[user_id]

    await update.message.reply_text(
        "–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω.",
        reply_markup=main_menu_keyboard()
    )
    return ConversationHandler.END


# –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø–∏—Å–∏
def create_appointment_handler():
    return ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É$"), start_appointment)],
        states={
            AppointmentState.SELECT_SERVICE: [CallbackQueryHandler(select_service, pattern="^select_service_")],
            AppointmentState.SELECT_DATE: [CallbackQueryHandler(select_date, pattern="^select_date_")],
            AppointmentState.SELECT_TIME: [CallbackQueryHandler(select_time, pattern="^select_time_")],
            AppointmentState.CAR_BRAND: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_car_brand)],
            AppointmentState.CAR_MODEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_car_model)],
            AppointmentState.CAR_YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_car_year)],
            AppointmentState.PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            AppointmentState.COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_comment)],
            AppointmentState.CONFIRM: [
                CallbackQueryHandler(confirm_appointment, pattern="^confirm_appointment$"),
                CallbackQueryHandler(cancel_appointment, pattern="^cancel_appointment$")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation)],
        map_to_parent={
            ConversationHandler.END: ConversationHandler.END
        }
    )


def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ—Å—Ç–æ –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∞–∑–µ - —ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        services = db.get_services()
        logging.info(f"‚úÖ Database test successful. Found {len(services)} services.")
        return True
    except Exception as e:
        logging.error(f"‚ùå Database test failed: {e}")
        return False

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö INLINE-–ö–ù–û–ü–û–ö ====================
async def button_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø–∏—Å–∏
    if query.data.startswith(
            ('select_service_', 'select_date_', 'select_time_', 'confirm_appointment', 'cancel_appointment')):
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–æ–∫
    if query.data.startswith('admin_'):
        if query.data == 'admin_today':
            await admin_today(update, context)
        elif query.data == 'admin_all':
            await admin_all(update, context)
        elif query.data == 'admin_stats':
            await admin_stats(update, context)
        elif query.data == 'admin_back':
            await admin_back(update, context)
        elif query.data == 'admin_close':
            await admin_close(update, context)
        elif query.data == 'admin_manage':
            await admin_manage(update, context)
        elif query.data == 'admin_manage_id':
            await admin_manage_id(update, context)
        elif query.data == 'admin_today_manage':
            await admin_today_manage(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if query.data.startswith(('confirm_', 'cancel_', 'manage_')):
        await handle_management_action(update, context)
        return

    await query.edit_message_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ... üõ†")

# ==================== –ü–û–õ–£–ß–ï–ù–ò–ï ID ====================

async def get_id(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    await update.message.reply_text(
        f"üÜî –í–∞—à ID: `{user_id}`\n\n"
        "–°–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ—Ç ID —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã.",
        parse_mode='Markdown'
    )


# ==================== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ====================

from config import ADMIN_IDS


def is_admin(user_id):
    return user_id in ADMIN_IDS
async def safe_send_message(chat_id, text, context, reply_markup=None, parse_mode='Markdown'):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        if parse_mode:
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup
            )
    except Exception as e:
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ Markdown
        if "Can't parse entities" in str(e):
            text_plain = text.replace('*', '').replace('_', '').replace('`', '')
            await context.bot.send_message(
                chat_id=chat_id,
                text=text_plain,
                reply_markup=reply_markup
            )
        else:
            raise e

async def admin_panel(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    today = datetime.now().strftime("%d.%m.%Y")
    today_appointments = db.get_appointments_by_date(today)
    today_count = len(today_appointments)

    keyboard = [
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="admin_today")],
        [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–ø–∏—Å–∏", callback_data="admin_all")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É", callback_data="admin_close")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = f"""
üë®‚Äçüíº **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**

üìä –°–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π: {today_count}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def admin_today(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    today = datetime.now().strftime("%d.%m.%Y")
    appointments = db.get_appointments_by_date(today)

    if not appointments:
        text = "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç."
    else:
        text = f"üìÖ **–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today})**\n\n"

        for i, appt in enumerate(appointments, 1):
            status_icon = "‚úÖ" if appt['status'] == 'confirmed' else "‚è≥"
            text += f"{i}. {status_icon} {appt['appointment_time']}\n"
            text += f"   üöó {appt['service_name']}\n"
            text += f"   üë§ {appt['car_brand']} {appt['car_model']}\n"
            text += f"   üìû {appt['phone']}\n"
            text += f"   üìù ID: #{appt['id']}\n\n"

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_today")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def admin_all(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    appointments = db.get_all_appointments(days=7)
    active_appointments = [a for a in appointments if a['status'] != 'cancelled']

    if not active_appointments:
        text = "üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç."
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_all")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    else:
        text = "üìã *–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (7 –¥–Ω–µ–π)*\n\n"

        current_date = None
        for appt in active_appointments:
            if appt['appointment_date'] != current_date:
                current_date = appt['appointment_date']
                weekday = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][
                    datetime.strptime(current_date, "%d.%m.%Y").weekday()
                ]
                text += f"\nüìÖ *{current_date} ({weekday})*\n"

            status_icon = "‚úÖ" if appt['status'] == 'confirmed' else "‚è≥"
            text += f"{status_icon} *{appt['appointment_time']}* - {appt['service_name']}\n"
            text += f"   üë§ {appt['first_name']} | üöó {appt['car_brand']} {appt['car_model']}\n"
            text += f"   üìû {appt['phone']} | ID: #{appt['id']}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, –Ω–µ Markdown)
            if appt['status'] == 'pending':
                text += "   ‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            elif appt['status'] == 'confirmed':
                text += "   ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n"

            text += "\n"

        keyboard = [
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_all"),
                InlineKeyboardButton("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="admin_manage")
            ],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def admin_manage(update, context):
    """–†–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    text = """
üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    keyboard = [
        [InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ ID", callback_data="admin_manage_id")],
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="admin_today_manage")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def admin_manage_id(update, context):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é –ø–æ ID"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    context.user_data['admin_manage_search'] = True

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def admin_today_manage(update, context):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    today = datetime.now().strftime("%d.%m.%Y")
    appointments = db.get_appointments_by_date(today)

    if not appointments:
        text = "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç."
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage")]]
    else:
        text = f"üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today})**\n\n"

        for appt in appointments:
            status_icon = "‚úÖ" if appt['status'] == 'confirmed' else "‚è≥"
            text += f"{status_icon} **{appt['appointment_time']}** - {appt['service_name']}\n"
            text += f"   üë§ {appt['first_name']} | üöó {appt['car_brand']}\n"
            text += f"   üìû {appt['phone']} | ID: #{appt['id']}\n"

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
            if appt['status'] == 'pending':
                text += "   ‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            elif appt['status'] == 'confirmed':
                text += "   ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n"

            text += "\n"

        keyboard = []
        for appt in appointments:
            btn_text = f"#{appt['id']} {appt['appointment_time']} - {appt['first_name']}"
            keyboard.append([
                InlineKeyboardButton(btn_text, callback_data=f"manage_{appt['id']}")
            ])

        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def handle_manage_search(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = update.message.from_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if not context.user_data.get('admin_manage_search'):
        return

    try:
        appointment_id = int(update.message.text.strip())
        await show_appointment_management(update.message, appointment_id, user_id)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        del context.user_data['admin_manage_search']

    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ).")


async def show_appointment_management(message, appointment_id, admin_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é"""
    appointment = db.get_appointment(appointment_id)

    if not appointment:
        await message.reply_text("‚ùå –ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    status_text = {
        'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
    }

    # –£–ø—Ä–æ—â–∞–µ–º —Ç–µ–∫—Å—Ç, —É–±–∏—Ä–∞–µ–º —Å–ª–æ–∂–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    text = f"""
üîß *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é #{appointment['id']}*

üöó *–£—Å–ª—É–≥–∞:* {appointment['service_name']}
üìÖ *–î–∞—Ç–∞:* {appointment['appointment_date']}
üïí *–í—Ä–µ–º—è:* {appointment['appointment_time']}
üéØ *–°—Ç–∞—Ç—É—Å:* {status_text[appointment['status']]}

üë§ *–ö–ª–∏–µ–Ω—Ç:*
‚Ä¢ –ò–º—è: {appointment['first_name']}
‚Ä¢ Username: @{appointment['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {appointment['phone']}

üöô *–ê–≤—Ç–æ–º–æ–±–∏–ª—å:*
‚Ä¢ –ú–∞—Ä–∫–∞: {appointment['car_brand']}
‚Ä¢ –ú–æ–¥–µ–ª—å: {appointment['car_model']}
‚Ä¢ –ì–æ–¥: {appointment['car_year']}

üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {appointment['comment'] or '–Ω–µ—Ç'}
"""
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    keyboard = []
    if appointment['status'] == 'pending':
        keyboard.append([
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{appointment_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{appointment_id}")
        ])
    elif appointment['status'] == 'confirmed':
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{appointment_id}")])


    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_manage")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    try:
        await message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        # –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text_plain = text.replace('*', '').replace('_', '')
        await message.reply_text(text_plain, reply_markup=reply_markup)


async def handle_management_action(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    data = query.data
    appointment_id = int(data.split('_')[-1])

    if data.startswith('confirm_'):
        success = db.update_appointment_status(appointment_id, 'confirmed')
        action_text = "‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!"
    elif data.startswith('cancel_'):
        success = db.update_appointment_status(appointment_id, 'cancelled')
        action_text = "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!"
    elif data.startswith('manage_'):
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é
        await show_appointment_management(query.message, appointment_id, query.from_user.id)
        return
    else:
        return

    if success:
        await query.answer(action_text)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        appointment = db.get_appointment(appointment_id)
        if appointment:
            status_text = {
                'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
                'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
                'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
            }

            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            text = f"""
üîß –ó–∞–ø–∏—Å—å #{appointment['id']} - {action_text}

üöó –£—Å–ª—É–≥–∞: {appointment['service_name']}
üìÖ –î–∞—Ç–∞: {appointment['appointment_date']}
üïí –í—Ä–µ–º—è: {appointment['appointment_time']}
üéØ –°—Ç–∞—Ç—É—Å: {status_text[appointment['status']]}

üë§ –ö–ª–∏–µ–Ω—Ç: {appointment['first_name']}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {appointment['phone']}
üöô –ê–≤—Ç–æ: {appointment['car_brand']} {appointment['car_model']}
"""
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_manage")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
            except:
                await query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞!")

async def admin_stats(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ 30 –¥–Ω–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    appointments = db.get_all_appointments(days=30)

    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä—É—á–Ω—É—é
    service_stats = {}
    status_stats = {'pending': 0, 'confirmed': 0, 'cancelled': 0}

    for appt in appointments:
        service_name = appt['service_name']
        service_stats[service_name] = service_stats.get(service_name, 0) + 1
        status_stats[appt['status']] = status_stats.get(appt['status'], 0) + 1

    text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (30 –¥–Ω–µ–π)**\n\n"

    text += "üìà **–ü–æ —É—Å–ª—É–≥–∞–º:**\n"
    for service, count in service_stats.items():
        text += f"‚Ä¢ {service}: {count}\n"

    text += "\nüéØ **–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:**\n"
    text += f"‚Ä¢ ‚è≥ –û–∂–∏–¥–∞—é—Ç: {status_stats['pending']}\n"
    text += f"‚Ä¢ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã: {status_stats['confirmed']}\n"
    text += f"‚Ä¢ ‚ùå –û—Ç–º–µ–Ω–µ–Ω—ã: {status_stats['cancelled']}\n"

    text += f"\nüìÖ **–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:** {len(appointments)}"

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def admin_back(update, context):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    today = datetime.now().strftime("%d.%m.%Y")
    today_appointments = db.get_appointments_by_date(today)
    today_count = len(today_appointments)

    keyboard = [
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="admin_today")],
        [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–ø–∏—Å–∏", callback_data="admin_all")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É", callback_data="admin_close")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = f"""
üë®‚Äçüíº **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**

üìä –°–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π: {today_count}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def admin_close(update, context):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text("üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.")

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        logging.info("Testing database connection...")
        if not test_database_connection():
            logging.error("Database connection test failed!")
            return

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()

        # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.bot.delete_webhook(drop_pending_updates=True)
        application.run_polling(
            allowed_updates=['message', 'callback_query'],
            timeout=30
        )

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import time
        time.sleep(10)

if __name__ == '__main__':
    main()